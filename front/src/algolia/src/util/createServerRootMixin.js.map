{"version":3,"file":"createServerRootMixin.js","sources":["../../../../src/util/createServerRootMixin.js"],"sourcesContent":["import instantsearch from 'instantsearch.js/es';\nimport { isVue3, isVue2, Vue2, createSSRApp } from './vue-compat';\nimport { warn } from './warn';\n\nfunction walkIndex(indexWidget, visit) {\n  visit(indexWidget);\n\n  return indexWidget.getWidgets().forEach(widget => {\n    if (widget.$$type !== 'ais.index') return;\n    visit(widget);\n    walkIndex(widget, visit);\n  });\n}\n\nfunction searchOnlyWithDerivedHelpers(helper) {\n  return new Promise((resolve, reject) => {\n    helper.searchOnlyWithDerivedHelpers();\n\n    // we assume all derived helpers resolve at least in the same tick\n    helper.derivedHelpers[0].on('result', () => {\n      resolve();\n    });\n\n    helper.derivedHelpers.forEach(derivedHelper =>\n      derivedHelper.on('error', e => {\n        reject(e);\n      })\n    );\n  });\n}\n\nfunction defaultCloneComponent(componentInstance, { mixins = [] } = {}) {\n  const options = {\n    serverPrefetch: undefined,\n    fetch: undefined,\n    _base: undefined,\n    name: 'ais-ssr-root-component',\n  };\n\n  let app;\n\n  if (isVue3) {\n    const appOptions = Object.assign({}, componentInstance.$options, options);\n    appOptions.mixins = [...mixins, ...(appOptions.mixins || [])];\n    app = createSSRApp(appOptions);\n    if (componentInstance.$router) {\n      app.use(componentInstance.$router);\n    }\n    if (componentInstance.$store) {\n      app.use(componentInstance.$store);\n    }\n  } else {\n    // copy over global Vue APIs\n    options.router = componentInstance.$router;\n    options.store = componentInstance.$store;\n\n    const Extended = componentInstance.$vnode\n      ? componentInstance.$vnode.componentOptions.Ctor.extend(options)\n      : Vue2.component(\n          options.name,\n          Object.assign({}, componentInstance.$options, options)\n        );\n\n    app = new Extended({\n      propsData: componentInstance.$options.propsData,\n      mixins: [...mixins],\n    });\n  }\n\n  // https://stackoverflow.com/a/48195006/3185307\n  app.$slots = componentInstance.$slots;\n  app.$root = componentInstance.$root;\n  if (isVue2) {\n    app.$options.serverPrefetch = [];\n  }\n\n  return app;\n}\n\nfunction augmentInstantSearch(instantSearchOptions, cloneComponent) {\n  const search = instantsearch(instantSearchOptions);\n\n  let initialResults;\n\n  /**\n   * main API for SSR, called in serverPrefetch of a root component which contains instantsearch\n   * @param {Object} props the object including `component` and `renderToString`\n   * @param {Object} props.component the calling component's `this`\n   * @param {Function} props.renderToString the function to render componentInstance to string\n   * @returns {Promise} result of the search, to save for .hydrate\n   */\n  search.findResultsState = function({ component, renderToString }) {\n    if (!renderToString) {\n      throw new Error(\n        'findResultsState requires `renderToString: (component) => Promise<string>` in the first argument.'\n      );\n    }\n\n    let app;\n    let instance;\n\n    return Promise.resolve()\n      .then(() => {\n        app = cloneComponent(component, {\n          mixins: [\n            {\n              beforeCreate() {\n                const descriptor = Object.getOwnPropertyDescriptor(\n                  component,\n                  '$nuxt'\n                );\n\n                const isWritable = descriptor\n                  ? descriptor.writable || descriptor.set\n                  : false;\n\n                if (component.$nuxt && isWritable) {\n                  // In case of Nuxt (3), we ensure the context is shared between\n                  // the real and cloned component\n                  this.$nuxt = component.$nuxt;\n                }\n              },\n              created() {\n                instance = this.instantsearch;\n\n                instance.start();\n                // although we use start for initializing the main index,\n                // we don't want to send search requests yet\n                instance.started = false;\n              },\n            },\n          ],\n        });\n      })\n      .then(() => renderToString(app))\n      .then(() => searchOnlyWithDerivedHelpers(instance.mainHelper))\n      .then(() => {\n        initialResults = {};\n        walkIndex(instance.mainIndex, widget => {\n          const { _state, _rawResults } = widget.getResults();\n\n          initialResults[widget.getIndexId()] = {\n            // copy just the values of SearchParameters, not the functions\n            state: Object.keys(_state).reduce((acc, key) => {\n              // eslint-disable-next-line no-param-reassign\n              acc[key] = _state[key];\n              return acc;\n            }, {}),\n            results: _rawResults,\n          };\n        });\n\n        search.hydrate(initialResults);\n        return search.getState();\n      });\n  };\n\n  /**\n   * @returns {Promise} result state to serialize and enter into .hydrate\n   */\n  search.getState = function() {\n    if (!initialResults) {\n      throw new Error('You need to wait for findResultsState to finish');\n    }\n    return initialResults;\n  };\n\n  /**\n   * make sure correct data is available in each widget's state.\n   * called in widget mixin with (this.widget, this)\n   *\n   * @param {object} widget The widget instance\n   * @param {object} parent The local parent index\n   * @returns {void}\n   */\n  search.__forceRender = function(widget, parent) {\n    const results = parent.getResults();\n\n    // this happens when a different InstantSearch gets rendered initially,\n    // after the hydrate finished. There's thus no initial results available.\n    if (results === null) {\n      return;\n    }\n\n    const state = results._state;\n\n    const localHelper = parent.getHelper();\n    // helper gets created in init, but that means it doesn't get the injected\n    // parameters, because those are from the lastResults\n    localHelper.state = state;\n\n    widget.render({\n      helper: localHelper,\n      results,\n      scopedResults: parent.getScopedResults(),\n      parent,\n      state,\n      templatesConfig: {},\n      createURL: parent.createURL,\n      instantSearchInstance: search,\n      searchMetadata: {\n        isSearchStalled: false,\n      },\n    });\n  };\n\n  /**\n   * Called both in server\n   * @param {object} results a map of indexId: SearchResults\n   * @returns {void}\n   */\n  search.hydrate = function(results) {\n    if (!results) {\n      warn(\n        'The result of `findResultsState()` needs to be passed to `hydrate()`.'\n      );\n      return;\n    }\n\n    search._initialResults = results;\n\n    search.start();\n    search.started = false;\n  };\n  return search;\n}\n\nexport function createServerRootMixin(instantSearchOptions = {}) {\n  const { $cloneComponent = defaultCloneComponent } = instantSearchOptions;\n\n  const search = augmentInstantSearch(instantSearchOptions, $cloneComponent);\n\n  // put this in the user's root Vue instance\n  // we can then reuse that InstantSearch instance seamlessly from `ais-instant-search-ssr`\n  const rootMixin = {\n    provide() {\n      return {\n        $_ais_ssrInstantSearchInstance: this.instantsearch,\n      };\n    },\n    data() {\n      return {\n        // this is in data, so that the real & cloned render do not share\n        // the same instantsearch instance.\n        instantsearch: search,\n      };\n    },\n  };\n\n  return rootMixin;\n}\n"],"names":["defaultCloneComponent","componentInstance","ref","app","options","serverPrefetch","undefined","fetch","_base","name","router","$router","store","$store","$vnode","componentOptions","Ctor","extend","Vue2","component","Object","assign","$options","propsData","mixins","$slots","$root","augmentInstantSearch","instantSearchOptions","cloneComponent","initialResults","search","instantsearch","findResultsState","instance","renderToString","Error","Promise","resolve","then","beforeCreate","descriptor","getOwnPropertyDescriptor","isWritable","writable","set","$nuxt","created","this","start","started","helper","mainHelper","reject","searchOnlyWithDerivedHelpers","derivedHelpers","on","forEach","derivedHelper","e","walkIndex","indexWidget","visit","getWidgets","widget","$$type","mainIndex","getResults","getIndexId","state","keys","_state","reduce","acc","key","results","_rawResults","hydrate","getState","__forceRender","parent","localHelper","getHelper","render","scopedResults","getScopedResults","templatesConfig","createURL","instantSearchInstance","searchMetadata","isSearchStalled","_initialResults","warn","createServerRootMixin","$cloneComponent","provide","$_ais_ssrInstantSearchInstance","data"],"mappings":"+HA+BA,SAASA,EAAsBC,EAAmBC,kBAAkB,kCAAP,QAQvDC,EAPEC,EAAU,CACdC,oBAAgBC,EAChBC,WAAOD,EACPE,WAAOF,EACPG,KAAM,iCAiBNL,EAAQM,OAAST,EAAkBU,QACnCP,EAAQQ,MAAQX,EAAkBY,QASlCV,EAAM,IAPWF,EAAkBa,OAC/Bb,EAAkBa,OAAOC,iBAAiBC,KAAKC,OAAOb,GACtDc,EAAKC,UACHf,EAAQK,KACRW,OAAOC,OAAO,GAAIpB,EAAkBqB,SAAUlB,KAGjC,CACjBmB,UAAWtB,EAAkBqB,SAASC,UACtCC,OAAQ,UAAIA,MAKZC,OAASxB,EAAkBwB,OAC/BtB,EAAIuB,MAAQzB,EAAkByB,MAE5BvB,EAAImB,SAASjB,eAAiB,GAGzBF,EAGT,SAASwB,EAAqBC,EAAsBC,OAG9CC,EAFEC,EAASC,EAAcJ,UAW7BG,EAAOE,iBAAmB,SAAS/B,OAO7BC,EACA+B,uCAPCC,QACG,IAAIC,MACR,4GAOGC,QAAQC,UACZC,gBACCpC,EAAM0B,EAAeV,EAAW,CAC9BK,OAAQ,CACN,CACEgB,4BACQC,EAAarB,OAAOsB,yBACxBvB,EACA,SAGIwB,IAAaF,IACfA,EAAWG,UAAYH,EAAWI,KAGlC1B,EAAU2B,OAASH,SAGhBG,MAAQ3B,EAAU2B,QAG3BC,oBACEb,EAAWc,KAAKhB,eAEPiB,QAGTf,EAASgB,SAAU,SAM5BX,uBAAWJ,EAAehC,KAC1BoC,uBAzH+BY,EAyHSjB,EAASkB,WAxH/C,IAAIf,iBAASC,EAASe,GAC3BF,EAAOG,+BAGPH,EAAOI,eAAe,GAAGC,GAAG,oBAC1BlB,MAGFa,EAAOI,eAAeE,iBAAQC,UAC5BA,EAAcF,GAAG,iBAASG,GACxBN,EAAOM,SAXf,IAAsCR,IA0H/BZ,uBACCT,EAAiB,GArIzB,SAAS8B,EAAUC,EAAaC,UAC9BA,EAAMD,GAECA,EAAYE,aAAaN,iBAAQO,GAChB,cAAlBA,EAAOC,SACXH,EAAME,GACNJ,EAAUI,EAAQF,MAgIdF,CAAU1B,EAASgC,mBAAWF,SACIA,EAAOG,wCAEvCrC,EAAekC,EAAOI,cAAgB,CAEpCC,MAAOjD,OAAOkD,KAAKC,GAAQC,gBAAQC,EAAKC,UAEtCD,EAAIC,GAAOH,EAAOG,GACXD,GACN,IACHE,QAASC,KAIb7C,EAAO8C,QAAQ/C,GACRC,EAAO+C,cAOpB/C,EAAO+C,SAAW,eACXhD,QACG,IAAIM,MAAM,0DAEXN,GAWTC,EAAOgD,cAAgB,SAASf,EAAQgB,OAChCL,EAAUK,EAAOb,gBAIP,OAAZQ,OAIEN,EAAQM,EAAQJ,OAEhBU,EAAcD,EAAOE,YAG3BD,EAAYZ,MAAQA,EAEpBL,EAAOmB,OAAO,CACZhC,OAAQ8B,UACRN,EACAS,cAAeJ,EAAOK,0BACtBL,QACAX,EACAiB,gBAAiB,GACjBC,UAAWP,EAAOO,UAClBC,sBAAuBzD,EACvB0D,eAAgB,CACdC,iBAAiB,OAUvB3D,EAAO8C,QAAU,SAASF,GACnBA,GAOL5C,EAAO4D,gBAAkBhB,EAEzB5C,EAAOkB,QACPlB,EAAOmB,SAAU,GATf0C,EACE,0EAUC7D,EAGF,SAAS8D,EAAsBjE,kBAAuB,2CACjC5B,OAEpB+B,EAASJ,EAAqBC,EAAsBkE,SAIxC,CAChBC,yBACS,CACLC,+BAAgChD,KAAKhB,gBAGzCiE,sBACS,CAGLjE,cAAeD"}