{"version":3,"file":"parseAlgoliaHit.js","sources":["../../../../src/util/parseAlgoliaHit.js"],"sourcesContent":["// copied from React InstantSearch\nimport { getPropertyByPath } from 'instantsearch.js/es/lib/utils';\nimport { unescape } from '../util/unescape';\n\nconst TAG_PLACEHOLDER = {\n  highlightPreTag: '__ais-highlight__',\n  highlightPostTag: '__/ais-highlight__',\n};\n\n/**\n * Parses an highlighted attribute into an array of objects with the string value, and\n * a boolean that indicated if this part is highlighted.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightedValue - highlighted attribute as returned by Algolia highlight feature\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nfunction parseHighlightedAttribute({ preTag, postTag, highlightedValue = '' }) {\n  const splitByPreTag = highlightedValue.split(preTag);\n  const firstValue = splitByPreTag.shift();\n  const elements =\n    firstValue === '' ? [] : [{ value: firstValue, isHighlighted: false }];\n\n  if (postTag === preTag) {\n    let isHighlighted = true;\n    splitByPreTag.forEach(split => {\n      elements.push({ value: split, isHighlighted });\n      isHighlighted = !isHighlighted;\n    });\n  } else {\n    splitByPreTag.forEach(split => {\n      const splitByPostTag = split.split(postTag);\n\n      elements.push({\n        value: splitByPostTag[0],\n        isHighlighted: true,\n      });\n\n      if (splitByPostTag[1] !== '') {\n        elements.push({\n          // Vue removes nodes which are just a single space (vuejs/vue#9208),\n          // we replace this by two spaces, which does not have an impact,\n          // unless someone would have `white-space: pre` on the highlights\n          value: splitByPostTag[1] === ' ' ? '  ' : splitByPostTag[1],\n          isHighlighted: false,\n        });\n      }\n    });\n  }\n\n  return elements;\n}\n\n/**\n * Find an highlighted attribute given an `attribute` and an `highlightProperty`, parses it,\n * and provided an array of objects with the string value and a boolean if this\n * value is highlighted.\n *\n * In order to use this feature, highlight must be activated in the configuration of\n * the index. The `preTag` and `postTag` attributes are respectively highlightPreTag and\n * highlightPostTag in Algolia configuration.\n *\n * @param {string} preTag - string used to identify the start of an highlighted value\n * @param {string} postTag - string used to identify the end of an highlighted value\n * @param {string} highlightProperty - the property that contains the highlight structure in the results\n * @param {string} attribute - the highlighted attribute to look for\n * @param {object} hit - the actual hit returned by Algolia.\n * @return {object[]} - An array of {value: string, isHighlighted: boolean}.\n */\nexport function parseAlgoliaHit({\n  preTag = TAG_PLACEHOLDER.highlightPreTag,\n  postTag = TAG_PLACEHOLDER.highlightPostTag,\n  highlightProperty,\n  attribute,\n  hit,\n}) {\n  if (!hit) throw new Error('`hit`, the matching record, must be provided');\n\n  const highlightObject =\n    getPropertyByPath(hit[highlightProperty], attribute) || {};\n\n  if (Array.isArray(highlightObject)) {\n    return highlightObject.map(item =>\n      parseHighlightedAttribute({\n        preTag,\n        postTag,\n        highlightedValue: unescape(item.value),\n      })\n    );\n  }\n\n  return parseHighlightedAttribute({\n    preTag,\n    postTag,\n    highlightedValue: unescape(highlightObject.value),\n  });\n}\n"],"names":["const","TAG_PLACEHOLDER","highlightPreTag","highlightPostTag","parseHighlightedAttribute","ref","splitByPreTag","highlightedValue","split","preTag","firstValue","shift","elements","value","isHighlighted","postTag","forEach","push","splitByPostTag","parseAlgoliaHit","hit","Error","highlightObject","getPropertyByPath","highlightProperty","attribute","Array","isArray","map","item","unescape"],"mappings":"oHAIAA,IAAMC,EAAkB,CACtBC,gBAAiB,oBACjBC,iBAAkB,sBAYpB,SAASC,EAA0BC,kEAAsC,QACjEC,EAAgBC,EAAiBC,MAAMC,GACvCC,EAAaJ,EAAcK,QAC3BC,EACW,KAAfF,EAAoB,GAAK,CAAC,CAAEG,MAAOH,EAAYI,eAAe,OAE5DC,IAAYN,EAAQ,KAClBK,GAAgB,EACpBR,EAAcU,iBAAQR,GACpBI,EAASK,KAAK,CAAEJ,MAAOL,gBAAOM,IAC9BA,GAAiBA,SAGnBR,EAAcU,iBAAQR,OACdU,EAAiBV,EAAMA,MAAMO,GAEnCH,EAASK,KAAK,CACZJ,MAAOK,EAAe,GACtBJ,eAAe,IAGS,KAAtBI,EAAe,IACjBN,EAASK,KAAK,CAIZJ,MAA6B,MAAtBK,EAAe,GAAa,KAAOA,EAAe,GACzDJ,eAAe,aAMhBF,EAmBF,SAASO,EAAgBd,iCACrBJ,EAAgBC,gDACfD,EAAgBE,sEAKrBiB,QAAW,IAAIC,MAAM,oDAEpBC,EACJC,EAAkBH,EAAII,GAAoBC,IAAc,UAEtDC,MAAMC,QAAQL,GACTA,EAAgBM,aAAIC,UACzBzB,EAA0B,QACxBK,UACAM,EACAR,iBAAkBuB,EAASD,EAAKhB,WAK/BT,EAA0B,QAC/BK,UACAM,EACAR,iBAAkBuB,EAASR,EAAgBT"}